// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  passwordHash String   @map("password_hash")
  cellphone    String
  cpf          String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Size {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("sizes")
}

model Color {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("colors")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("categories")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  price        Decimal
  description  String
  colorId      Int      @map("color_id")
  sizeId       Int      @map("size_id")
  categoryId   Int      @map("category_id")
  averageScore Decimal
  ean          String   @unique
  updatedAt    DateTime @updatedAt

  color    Color    @relation(fields: [colorId], references: [id])
  size     Size     @relation(fields: [sizeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  Stock    Stock[]

  @@map("products")
}

model Status {
  id    Int     @id @default(autoincrement())
  name  String
  Stock Stock[]

  @@map("status")
}

model Stock {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  statusId      Int      @map("status_id")
  purchasePrice Decimal  @map("purchase_price")
  quantity      Int
  expiryDate    DateTime @map("expiry_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  status  Status  @relation(fields: [statusId], references: [id])

  @@map("stocks")
}
